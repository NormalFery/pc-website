@use 'sass:color';
@use '@catppuccin/palette/scss/catppuccin';

@function fetch-catppuccin-palette($entry) {
	@if map-has-key(catppuccin.$palette, $entry) {
		@return map-get(catppuccin.$palette, $entry);
	}
	@error "Unknown `#{$entry}` in Catppuccin";
}

@function color($entry, $color) {
	$sub-palette: fetch-catppuccin-palette($entry);
	@if map-has-key($sub-palette, $color) {
		@return map-get($sub-palette, $color);
	}
	@error "Unknown `#{$color}` in Catppuccin palette `#{$entry}`";
}

@mixin define-colors($entry) {
	// For some reason function calling doesn't work without wrapping it here.
	// Oh well.
	--base: #{color($entry, 'base')};
	--text: #{color($entry, 'text')};
	--crust: #{color($entry, 'crust')};
	--mantle: #{color($entry, 'mantle')};
	--surface0: #{color($entry, 'surface0')};
	--surface1: #{color($entry, 'surface1')};
	--surface2: #{color($entry, 'surface2')};
	//--overlay0: #{color($entry, "overlay0")};
	--overlay1: #{color($entry, 'overlay1')};
	//--overlay2: #{color($entry, "overlay2")};

	--blue: #{color($entry, 'blue')};
	--sky: #{color($entry, 'sky')};
	--lavender: #{color($entry, 'lavender')};
}

:root {
	@include define-colors(latte);

	@media screen and (prefers-color-scheme: dark) {
		@include define-colors(macchiato);
	}

	& {
		background-color: var(--base);
		color: var(--text);

		--link: var(--blue);
		--link-hover: var(--sky);
		--link-visited: var(--lavender);

		--transition-time: 0.25s;
		--rotate-time: 0.15s;
	}

	@media (prefers-reduced-motion: reduce) {
		--transition-time: 0;
		--rotate-time: 0;
	}
}

a {
	transition:
		background-color var(--transition-time),
		color var(--transition-time);

	color: var(--link);

	&:visited {
		color: var(--link-visited);
	}

	&:hover {
		color: var(--link-hover);
	}
}

header {
	background-color: var(--surface0);
}

@mixin hex($a: null, $b: null, $c: null, $d: null, $e: null, $f: null) {
	@if $a {
		--a: #{$a};
	}
	@if $b {
		--b: #{$b};
	}
	@if $c {
		--c: #{$c};
	}
	@if $d {
		--d: #{$d};
	}
	@if $e {
		--e: #{$e};
	}
	@if $f {
		--f: #{$f};
	}
	--g: var(--a);
	--h: var(--b);
	--i: var(--c);
	--j: var(--d);
	--k: var(--e);
	--l: var(--f);
}

@mixin tri($a: null, $b: null, $c: null) {
	@if $a {
		--a: #{$a};
	}
	@if $b {
		--b: #{$b};
	}
	@if $c {
		--c: #{$c};
	}
	--d: var(--a);
	--g: var(--a);
	--j: var(--a);
	--e: var(--b);
	--h: var(--b);
	--k: var(--b);
	--f: var(--c);
	--i: var(--c);
	--l: var(--c);
}

svg.no-bg {
	--bg: transparent;
}

svg.rainbow {
	@include hex($a: #a528a4, $b: #cd3834, $c: #ff890a, $d: #f4ce47, $e: #8dda86, $f: #4371be);
}

svg.trans {
	@include tri($a: #f5a9b8, $b: #5bcefa, $c: #f3f3f3);
}

svg.bi {
	@include tri($a: #0038a8, $b: #9b4f96, $c: #d60270);
}

svg.gay {
	@include hex($a: #3e1a78, $b: #5049cb, $c: #7bade3, $d: #99e8c2, $e: #26ceaa, $f: #078d70);
}
